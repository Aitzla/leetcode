153. Find Minimum in Rotated Sorted Array
Suppose an array of length n sorted in ascending order is rotated between 1 and n times.
For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array 
[a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

Example 1:
* Input: nums = [3,4,5,1,2]
* Output: 1
* Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:
* Input: nums = [4,5,6,7,0,1,2]
* Output: 0
* Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:
* Input: nums = [11,13,15,17]
* Output: 11
* Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
----------------------------------------------------------
#想法

題目告訴我們這是有排序的陣列，經過旋轉，並且題目時間複雜度要控制在O(log n)以下。
因此可以使用二分搜尋法(Binary Search)。


int findMin(int* nums, int numsSize){
    int left = 0;
    int right = numsSize - 1;

    while(left < right)
    {
        int mid = left + (right - left) / 2;
        if(nums[mid] < nums[right])
        {
            right = mid;
        }else{
            left = mid + 1;
        }
    }

    return nums[left];
}

3種情況要辦別：1.    右 2.左      3.  中
                 中          右   左  
               左          中          右
1.最小值在最左邊，右邊界往左收
2.最小值在中間，右邊界往左收
3.最小值在最右邊，左邊界往右收

當while迴圈left<right，left<=mid，mid<right。
因此，在陣列的mid只會大小於right。
當陣列只有一個元素，左右邊界重合會直接退出循環。
當大於一個元素，如果left值==mid值>right值，為左邊大、右邊小，left=mid+1，最後left會等於right，left與right都為最小值。
若left值==mid值<right值，為左邊小、右邊大，right=mid，最後left==right，left、mid、right都為最小值。
