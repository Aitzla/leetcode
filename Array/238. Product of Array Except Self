238. Product of Array Except Self
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
* Input: nums = [1,2,3,4]
* Output: [24,12,8,6]

Example 2:
* Input: nums = [-1,1,0,-3,3]
* Output: [0,0,9,0,0]
-----------------------------------------------------------------------------
#想法
題目很難懂，其實就是除自身的乘積值等於它的左乘積在乘上他的右乘積
Example:

陣列:     1        2       3       4
左乘積:   1        1      1*2    1*2*3
右乘積:  2*3*4    3*4      4       1
結果:   1*2*3*4  1*3*4   1*2*4  1*2*3*1
------------------------------------------------
int* productExceptSelf(int* nums, int numsSize, int* returnSize){
    int left[numsSize];
    int right[numsSize];
    //左乘積
    left[0] = nums[0]; 
    for(int i = 1 ; i < numsSize ; i++)
    {
        left[i] = left[i-1] * nums[i];
    }
    //右乘積
    right[numsSize - 1] = nums[numsSize - 1];
    for(int i = numsSize - 1 - 1 ; i >= 0 ; i--)
    {
        right[i] = right[i+1] * nums[i];
    }

    *returnSize = numsSize;
    int *ans = (int*)malloc(sizeof(int)*numsSize);

    for(int i = 0 ; i <= numsSize - 1 ; i++)
    {
        if(i == 0)
        {
            ans[i] = right[i+1];
        }else if(i == numsSize - 1){
            ans[i] = left[i-1];
        }else{
            ans[i] = left[i-1] * right[i+1];
        }
    }
    return ans;
}

先求出左乘積與右乘積，當前元素若是第一個等於右乘積，若是最後一位等於左乘積，剩下的等於左乘積乘上右乘積。
