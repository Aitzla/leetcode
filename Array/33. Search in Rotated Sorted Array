33. Search in Rotated Sorted Array
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, 
nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], 
nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, 
return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
* Input: nums = [4,5,6,7,0,1,2], target = 0
* Output: 4

Example 2:
* Input: nums = [4,5,6,7,0,1,2], target = 3
* Output: -1

Example 3:
* Input: nums = [1], target = 0
* Output: -1
-----------------------------------------------------------------------
#想法
用二分搜尋法，利用左右邊界慢慢縮減到我們的target，並設定一個mid為target。
陣列是有排序過的，將陣列分成左半部與右半部。
左半部為nums[0] <= target && target < nums[mid]
右半部為nums[mid] < target && target <= nums[right - 1]
如果為中間就直接返回，若在左半部，右邊邊界設在mid-1，在右半邊，左邊界設在mid+1。

int search(int* nums, int numsSize, int target){
    int left = 0;
    int right = numsSize - 1;

    while(numsSize == 1)
    {
        if(nums[0] == target)
        {
            return 0;
        }else{
            return -1;
        }
    }

    while(left < right)
    {
        int mid = (left + right) / 2 ;
        if(nums[mid] == target)
        {
            return mid;
        }

        if(nums[0] <= nums[mid])
        {
            if(nums[0] <= target && target < nums[mid])
            {
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }else{
            if(nums[mid] < target && target <= nums[right - 1])
            {
                left = mid + 1;
            }else {
                right = mid - 1;
            }
        }
    }
    
    return -1;
}
