53. Maximum Subarray
Given an integer array nums, find the 
subarray with the largest sum, and return its sum.

Example 1:
* Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
* Output: 6
* Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
* Input: nums = [1]
* Output: 1
* Explanation: The subarray [1] has the largest sum 1.

Example 3:
* Input: nums = [5,4,-1,7,8]
* Output: 23
* Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
-----------------------------------------------------------------------
#想法
使用貪心法解決
貪心法：比如第一個例子來說-2、1，不會從-2開始，有負數會使我們最大連續和降低，
       先從當前位置開始調整，設定好當前位置，往後連續加看加到哪裡會是最大連續和。
設定兩種變數cur為起始位置，max為最大子陣列
int maxSubArray(int* nums, int numsSize){
    int cur = nums[0];
    int max = nums[0];

    for(int i = 1 ; i < numsSize ; i++)
    {
        if(cur + nums[i] > nums[i]) //不希望從負數開始，希望能從正數開始，儘管可能下一個元素有可能是負數
        {
            cur = cur + nums[i];  //
        }else{
            cur = nums[i];  //若cur是負數，就從下一個元素開始
        }
        if(max < cur)  //紀錄我們每一次元素相加的最大值，調整最大值是多少
        {
            max = cur;
        }
    }
    
    return max;
}
