141. Linked List Cycle

Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. 
Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
---------------------------------------------------------------
#想法
題目讓我們找有沒有環狀鏈表的判斷，這種題目可以使用快慢指針。
1.慢指針只走一步，快指針走兩步，一定會走到兩個一起的時候，此時就能判斷出是否有環形鏈表。
2.環形鏈表

bool hasCycle(struct ListNode *head) {    
    if(head == NULL || head -> next == NULL) //若頭節點為空或頭節點下一個為空，不為環形鏈表
    {
        return false;
    }
    struct ListNode* slow = head;
    struct ListNode* fast = head -> next;
    while(slow != fast)
    {
        if(fast == NULL || fast -> next == NULL) //確保fast下一個節點與下下個節點不為空
        {
            return false;
        }
        slow = slow -> next;
        fast = fast -> next -> next;
    }

    return true;
}
